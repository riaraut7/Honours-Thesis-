#Ria Raut
#let's load your packages first
library(broom)
library(tidyverse)
library(rTPC)
library(nls2)
library(nls.multstart)
library(scales)
library(gridExtra)
library(nlstools)
library(beepr)
#### the june model  ####
#The June model:
June_2004 <- function (temp, aopt, topt, omega) {
exponent <- (-1)*(((temp-topt)/omega)^2)
p_t <- aopt*exp(exponent)
return(p_t)
}
get_topt_errorcatch <- function(x) {
result <- tryCatch(
{
get_topt(x)
},
error = function(e) {
message("An error occurred with topt extraction: ", conditionMessage(e))
return(NA)  # Store NA when an error occurs
}
)
return(result)
}
get_omega_errorcatch <- function(x) {
result <- tryCatch(
{
this_is_omega <- coef(x)['omega']
return (this_is_omega)
},
error = function(e) {
message("An error occured with omega extraction: ", conditionMessage(e))
return(NA)  # Store NA when an error occurs
}
)
return(result)
}
get_aopt_errorcatch <- function(x) {
result <- tryCatch(
{
this_is_aopt <- coef(x)['aopt']
return (this_is_aopt)
},
error = function(e) {
message("An error occured with Aopt extraction: ", conditionMessage(e))
return(NA)  # Store NA when an error occurs
}
)
return(result)
}
filter_1 <- function(data) {
filter_criteria = c() # Holder
#new_dat = c() ###
# Find metrics for filtering for each curve
for (i in unique(data$curveID)) {
cur_dat = subset(data, curveID == i) # Grab the current data set
#resetting the 'odd' values each time so that when you have a curve with standard units, the curve doesn't
#fail just because the previous curve had odd units and had failed the criteria
nbefore_odd = 3
nafter_odd = 3
Tbefore_odd = 5
Tafter_odd = 5
#but if your curve actually has odd units, then you reset the nbefore_odd, etc values.
#this is possible because of this if statement below:
if (is.na(cur_dat$A_umol_m2_s[[1]])) { #i.e. if you don't have standard units for this curve
Tpk_odd = cur_dat$Tleaf_C[which(cur_dat$A_other_units == max(cur_dat$A_other_units)) [1]] #find peak w odd units
nbefore_odd = sum( cur_dat$Tleaf_C < Tpk_odd ) # Find number of points before peak
nafter_odd = sum( cur_dat$Tleaf_C > Tpk_odd )  # Find number of points before peak
Tbefore_odd = Tpk_odd-min(cur_dat$Tleaf_C)     # Find temperature span before peak
Tafter_odd = max(cur_dat$Tleaf_C)-Tpk      # Find temperature span after peak
} else { #else, if you DO have standard units for this curve:
Tpk = cur_dat$Tleaf_C[which( cur_dat$A_umol_m2_s == max(cur_dat$A_umol_m2_s) )[1]] # Find peak
#cur_dat = subset(cur_dat, Tleaf <= Tpk) ###
nbefore = sum( cur_dat$Tleaf_C < Tpk ) # Find number of points before peak
nafter = sum( cur_dat$Tleaf_C > Tpk )  # Find number of points before peak
Tbefore = Tpk-min(cur_dat$Tleaf_C)     # Find temperature span before peak
Tafter = max(cur_dat$Tleaf_C)-Tpk      # Find temperature span after peak
} #this bracket ends your if statement
filter_criteria = rbind(filter_criteria, data.frame(curveID = i, nbefore, nafter, Tbefore, Tafter,
nbefore_odd, nafter_odd, Tbefore_odd, Tafter_odd))
print(i)
} #this bracket ends your for loop
# Merge filtering metrics with dataset for ease of filtering
data = merge(data, filter_criteria, by="curveID")
#make a new column to add your filter statuses in:
data$failure_status = NA
# Reject curves if the are decreasing only, have too little T span, or too few points
data$failure_status = ifelse(data$nbefore < 2, "Rejected: fewer than two points before peak", data$failure_status)
data$failure_status = ifelse(data$nafter < 2, "Rejected: fewer than two points after peak", data$failure_status)
data$failure_status = ifelse(data$Tbefore < 2, "Rejected: ascending region too small", data$failure_status)
data$failure_status = ifelse(data$Tafter < 2, "Rejected: descending region too small", data$failure_status)
data$failure_status = ifelse(data$nbefore+data$nafter < 5, "Rejected: fewer than 5 data points", data$failure_status)
#same thing but for odd units:
data$failure_status = ifelse(data$nbefore_odd < 2, "Odd units. Rejected: fewer than two points before peak", data$failure_status)
data$failure_status = ifelse(data$nafter_odd < 2, "Odd units.Rejected: fewer than two points after peak", data$failure_status)
data$failure_status = ifelse(data$Tbefore_odd < 2, "Odd units.Rejected: ascending region too small", data$failure_status)
data$failure_status = ifelse(data$Tafter_odd < 2, "Odd units.Rejected: descending region too small", data$failure_status)
data$failure_status = ifelse(data$nbefore_odd+data$nafter_odd < 5, "Odd units. Rejected: fewer than 5 data points", data$failure_status)
data_after_filter1 = data %>% select(-nbefore, -nafter, -Tbefore, -Tafter,
-nbefore_odd, -nafter_odd, -Tbefore_odd, -Tafter_odd)  # Remove junk
beep(1) #beeps when the function is done!
return(data_after_filter1)
}
#now let's call this function with our dataset:
all_data <- read.csv('All_AT_data.csv', stringsAsFactors = TRUE)
passed_filter_1 <- filter_1(all_data)
#lets load your packages first
library(stringr)
library(V.PhyloMaker)
library(ggtree)
library(ggplot2)
library(tidyverse)
library(TNRS)
library(beepr)
library(taxize)
library(geiger)
#Here is your starting dataset with curve Id, species, breadth, topt, and lat/long values
starting_dataset <- read.csv('final_curve_parameter_filter_2_info_11.3.24.csv', stringsAsFactors = TRUE)
#Here is your starting dataset with curve Id, species, breadth, topt, and lat/long values
starting_dataset <- read.csv('final_curve_parameter_filter_2_info_11.3.24.csv', stringsAsFactors = TRUE)
#Here is your starting dataset with curve Id, species, breadth, topt, and lat/long values
starting_dataset <- read.csv('final_curve_parameter_filter_2_info_11.3.24.csv', stringsAsFactors = TRUE)
#first, just load your libraries
library(dplyr)
library(ggtree)
library(phytools)
library(viridis)
################################ START FROM HERE ####################################
#let's first load our data and tree
Main_tree <- read.tree('your_working_tree.tre')
